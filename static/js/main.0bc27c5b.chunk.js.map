{"version":3,"sources":["components/Section.js","components/Notification.js","components/Statistics/Statistiсs.js","components/Feedback/FeedbackOptions.js","components/Container/Container.js","components/App.js","index.js"],"names":["Section","title","children","className","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","el","type","id","onClick","Container","App","useState","setGood","setNeutral","setBad","countTotalFeedback","percentage","Math","round","e","target","textContent","prevS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8RAGe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,0BAASC,UAAU,UAAnB,UACE,oBAAIA,UAAU,cAAd,SAA6BF,IAC5BC,KCEQE,MANf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,oBAAIF,UAAU,sBAAd,SAAqCE,KCuB/BC,EAtBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,mCACE,qBAAIR,UAAU,mBAAd,UACE,qBAAIA,UAAU,mBAAd,mBAAwCI,KACxC,qBAAIJ,UAAU,mBAAd,sBAA2CK,KAC3C,qBAAIL,UAAU,mBAAd,kBAAuCM,KACvC,qBAAIN,UAAU,mBAAd,oBAAyCO,KACzC,qBAAIP,UAAU,mBAAd,gCACsBQ,EADtB,aCYOC,MArBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,qBAAKX,UAAU,aAAf,SACGU,EAAQE,KAAI,SAACC,GAAD,OACX,wBACEC,KAAK,SACLd,UAAU,YACVe,GAAIF,EAEJG,QAASL,EALX,SAOGE,GAHIA,S,MCTA,SAASI,EAAT,GAAkC,IAAblB,EAAY,EAAZA,SAClC,OAAO,qBAAKC,UAAU,YAAf,SAA4BD,ICgEtBmB,MA7Df,WACE,MAAwBC,mBAAS,GAAjC,mBAAOf,EAAP,KAAagB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOd,EAAP,KAAgBgB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOb,EAAP,KAAYgB,EAAZ,KAkBMC,EAAqB,WAEzB,OADcnB,EAAOC,EAAUC,GAY3BC,EAAQgB,IACRC,EARCpB,EAGsBqB,KAAKC,MAAOtB,EAAOmB,IAAwB,KAF7D,EAQX,OACE,eAACN,EAAD,WACE,cAACpB,EAAD,CAASC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEY,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBApCoB,SAACgB,GAE3B,OADwBA,EAAEC,OAAlBC,aAEN,IAAK,OACHT,GAAQ,SAACU,GAAD,OAAWA,EAAQ,KAC3B,MACF,IAAK,UACHT,GAAW,SAACS,GAAD,OAAWA,EAAQ,KAC9B,MACF,IAAK,MACHR,GAAO,SAACQ,GAAD,OAAWA,EAAQ,KAC1B,MACF,QACE,aA0BF,cAACjC,EAAD,CAASC,MAAM,aAAf,SACa,IAAVS,EACC,cAAC,EAAD,CAAcL,QAAQ,sBAEtB,cAAC,EAAD,CACEE,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,IACPf,mBAAoBgB,UCtDhCO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0bc27c5b.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport \"./styles/statistics.scss\";\n\nexport default function Section({ title, children }) {\n  return (\n    <section className=\"section\">\n      <h1 className=\"title__main\">{title}</h1>\n      {children}\n    </section>\n  );\n}\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n// class Section extends Component {\n//   state = {\n//     visible: false,\n//   };\n//   onShow = () => {\n//     this.setState({ visible: true });\n//   };\n//   render() {\n//     return <h1>{this.props.title}</h1>;\n//   }\n// }\n","import PropTypes from \"prop-types\";\nimport \"./styles/statistics.scss\";\n\nfunction Notification({ message }) {\n  return <h3 className=\"title__notification\">{message}</h3>;\n}\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../styles/statistics.scss\";\n\n// ===\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <ul className=\"statistics__list\">\n        <li className=\"statistics__item\">Good: {good}</li>\n        <li className=\"statistics__item\">Neutral: {neutral}</li>\n        <li className=\"statistics__item\">Bad: {bad}</li>\n        <li className=\"statistics__item\">Total: {total}</li>\n        <li className=\"statistics__item\">\n          Positive feedback: {positivePercentage}%\n        </li>\n      </ul>\n    </>\n  );\n};\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n// ==============\n\n//   render() {\n//     return (\n//       <>\n//         <h2>Statistics</h2>\n//         <ul className={st.statistics__list}>\n//           {Object.entries(this.props).map(([key, value]) => (\n//             <li className={st.statistics__item} id={key} key={key}>\n//               {key}:<span className={st.statistics__vote}>{value}</span>\n//             </li>\n//           ))}\n//         </ul>\n//       </>\n//     );\n//   }\n// }\n","import PropTypes from \"prop-types\";\n// [option]: state[option] + 1,\nimport \"../styles/statistics.scss\";\n\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n    <div className=\"btn__block\">\n      {options.map((el) => (\n        <button\n          type=\"button\"\n          className=\"btn__item\"\n          id={el}\n          key={el}\n          onClick={onLeaveFeedback}\n        >\n          {el}\n        </button>\n      ))}\n    </div>\n  );\n}\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport \"../styles/container.scss\";\n\nexport default function Container({ children }) {\n  return <div className=\"container\">{children}</div>;\n}\n","import { useState } from \"react\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\nimport Statistics from \"./Statistics/Statistiсs\";\nimport FeedbackOptions from \"./Feedback/FeedbackOptions\";\nimport Container from \"./Container/Container\";\n//\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  //\n  const handleIncrementVote = (e) => {\n    const { textContent } = e.target;\n    switch (textContent) {\n      case \"good\":\n        setGood((prevS) => prevS + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevS) => prevS + 1);\n        break;\n      case \"bad\":\n        setBad((prevS) => prevS + 1);\n        break;\n      default:\n        return;\n    }\n  };\n  const countTotalFeedback = () => {\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    if (!good) {\n      return 0;\n    }\n    const positivePercentage = Math.round((good / countTotalFeedback()) * 100);\n    return positivePercentage;\n  };\n\n  const total = countTotalFeedback();\n  const percentage = countPositiveFeedbackPercentage();\n  return (\n    <Container>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={[\"good\", \"neutral\", \"bad\"]}\n          onLeaveFeedback={handleIncrementVote}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {total === 0 ? (\n          <Notification message=\"No feedback given\"></Notification>\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={countTotalFeedback()}\n            positivePercentage={percentage}\n          />\n        )}\n      </Section>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}